/*
Tester Class for search algorithms using JavaFX GUI
Generates a random array for testing search algorithms
Sam Moore V1.3
 */

package searchalgorithms;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

import java.util.Arrays;
import java.util.Random;

public class SearchAlgorithmTester extends Application
{
    //Store randomly generated array
    int[] r_arr;

    //Boolean to check if array is sorted
    boolean isSorted = false;

    //Reference to search algorithm objects
    LinearSearch linearSearch;
    BinarySearch binarySearch;

    @Override
    public void start(Stage stage)
    {
        //Non-editable text area to display array
        TextArea display = new TextArea();
        display.setEditable(false);
        display.setMinSize(210, 50);
        display.setMaxSize(210, 50);

        //Text field to set target to search
        TextField targetField = new TextField();
        targetField.setMaxWidth(50);

        //Label to display search result
        Label resultLabel = new Label();
        resultLabel.setWrapText(true);
        resultLabel.setTextFill(Color.RED);
        resultLabel.setTextAlignment(TextAlignment.CENTER);
        resultLabel.setFont(Font.font("Arial", 16));

        //Radio button to select search algorithm
        ToggleGroup group = new ToggleGroup();

        RadioButton linearRB = new RadioButton("Linear");
        linearRB.setToggleGroup(group);
        linearRB.setSelected(true);

        RadioButton binaryRB = new RadioButton("Binary");
        binaryRB.setToggleGroup(group);

        //Button to generate array
        Button generateButton = new Button();
        generateButton.setText("Generate Array");
        generateButton.setOnAction( e ->
                {
                    //Store random array
                    r_arr = generateArray();

                    //Set array as unsorted
                    isSorted = false;

                    //Set display to randomly generated array
                    display.setText(Arrays.toString(r_arr));
                });

        //Button to sort array (necessary for binary search)
        Button sortButton = new Button();
        sortButton.setText("Sort Array");
        sortButton.setOnAction( e ->
                {
                    if(display.getText().isEmpty())
                    {
                        display.setText("Please generate an array to sort");
                    }else{
                        sortArray(r_arr);

                        //Set array as sorted
                        isSorted = true;

                        display.setText(Arrays.toString(r_arr));
                    }
                });

        //Button to search array for target
        Button searchButton = new Button();
        searchButton.setText("Search");
        searchButton.setOnAction( e ->
                {
                    if(targetField.getText().isEmpty())
                    {
                        resultLabel.setText("Please enter a value");
                    }else{
                        if(linearRB.isSelected() == true)
                        {
                            //Call to search class
                            linearSearch = new LinearSearch(r_arr, Integer.parseInt(targetField.getText()));

                            if(linearSearch.searchArray() < 0)
                            {
                                resultLabel.setText("Target not in array");
                            }else{
                                resultLabel.setText("Target is at location " + (linearSearch.searchArray() + 1));
                            }
                        }else if(binaryRB.isSelected() == true)
                        {
                            //Check if array is sorted
                            if(isSorted == false)
                            {
                                resultLabel.setText("Array needs to be sorted for binary search");
                            }else{
                                //Call to search class
                                binarySearch = new BinarySearch(r_arr, Integer.parseInt(targetField.getText()));

                                if(binarySearch.searchArray() < 0)
                                {
                                    resultLabel.setText("Target not in array");
                                }else{
                                    resultLabel.setText("Target is at location " + (binarySearch.searchArray() + 1));
                                }
                            }
                        }
                    }
                });

        HBox rbGroup = new HBox(10);
        rbGroup.setAlignment(Pos.CENTER);
        rbGroup.getChildren().addAll(linearRB, binaryRB);

        HBox searchGroup = new HBox(10);
        searchGroup.setAlignment(Pos.CENTER);
        searchGroup.getChildren().addAll(targetField, searchButton);

        VBox root = new VBox(25);
        root.setAlignment(Pos.CENTER);
        root.getChildren().addAll(generateButton, display, sortButton, rbGroup, searchGroup, resultLabel);

        Scene scene = new Scene(root, 350, 350);
        stage.setScene(scene);
        stage.setTitle("Search Algorithm Tester");
        stage.show();
    }

    public static void main(String[] args)
    {
        launch(args);
    }

    //Method for generating a random array of ints
    static int[] generateArray()
    {
        int min = 0;
        int max = 100;

        Random r = new Random();
        int[] arr = new int[10];
        for (int i = 0; i < arr.length; i++)
        {
            arr[i] = r.nextInt(max + 1 - min) + min;
        }

        return arr;
    }

    //Method for sorting array (necessary for binary search)
    //Uses Insertion Sort
    static void sortArray(int[] arrIn)
    {
        for(int i = 1; i < arrIn.length; i++)
        {
            int key = arrIn[i];
            int j = i - 1;

            while(j >= 0 && arrIn[j] > key)
            {
                arrIn[j + 1] = arrIn[j];
                j = j - 1;
            }
            arrIn[j + 1] = key;
        }
    }
}
